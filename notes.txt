Notes

=======
MAP
=======
Which things interact with the DOM?
	1) The most granular things change themselves
	2) Keep it as high level as possible

page/game
	all updates
	score comparisons

	board/screen/compartment/container/arcade/machine/arena/table/window/instance/game/solo/individual-game
		RECIEVES
		score
		losing lives
		end condition

		ACTIONS
		own update
		end individual game

		field
			ACTIONS
			own building
			building
			updating

			CHILDREN OBJECTS
			player  --->  stats?
					\
				  bullets
					/
			other

			RETURNS
			score
			losing lives
			end condition

		info/hud
			score <- what does score mean here
				includes how many killed
				misses
				amount of time it took
				(maybe just a timer)
			lives
			player name
			separators

Each field.update() returns [lostLife, score, whichEnd]. Losing a life happens before losing a game.


=========================
CODE SPECIFIC QUESTIONS
=========================
- One long list of Others? Or collision digs until it reaches a non-list object then works its way out again.
- .collide returns whether object should be destroyed or not, then it gets removed from the list of not.


=============
THOUGHTS
=============
-- Objects and their stuff:

Should others move themselves? They are individual objects. Sure, they have a parent, but wouldn't it be more game-engine-y to each be individuals? Then again, the DOM is moving each individual one for me and that's kind of what a parent object is supposed to do, right?
	- I think the DOM should move children

Should rows be objects and Others be their children? Right now rows are the odd man out, being only DOM elements. Then should the field act on the
children of rows, or should Others only be acted upon by rows?

It seems like a player should own its list of bullets - that would make it really easy to iterate to update the bullets, especially to check for the right collisions. But should Others own their bullets? That seems inefficient because honestly there will only be a couple or a few Others' bullets out there at a time. So should the field own all the bullets? Once the shooters let them go, they should be free agents?
	Yes. All bullets should be able to collide with any collidable objects on the page!



-- Other
It would be cool if agents (Others and Players) had a direction they were facing and bullets went in whatever direction they were facing. It would be an angle or some-such.




================
TEMPLATES
================
	xxx.buildHTML = function () {
	/*

	*/
		var self = this;
		var html = document.createElement( "yyy" );
		html.className = "yyy";

		self.html = html;
		return self;

	};  // end xxx.buildHTML()



	for ( var rowi = 0; rowi < things.length; rowi++ ) {
		var thing = thins[ rowi ];


	}




	console.trace()


============
Possibly Useful
============

Making sure the "this" is correct
Does this.Bind have to be called every time you want to make sure of
	the "this"?
// Define the base class for all object classes.
function BaseObject()
{
// Class properties.
}
 
// Method returns a class-bound vesion of the passed-in
// function; this will execute in the context of the
// originating object (this).
BaseObject.prototype.Bind = function( fnMethod, arguments_ )
{
    var objSelf = this;
 
    // Return a method that will call the given method
    // in the context of THIS object.
    return( function()
        {
            if (arguments_ === undefined)
                return( fnMethod.apply( objSelf, arguments ) );
            else
                return( fnMethod.apply( objSelf, arguments_ ) );
        } );
} ;

// this.Bind( func, arguments );





	util.callWithThis = function ( objSelf, fnMethod, fnArguments ) {
	/* ( {}, func, [] ) -> func

	Make sure the "this" in the function is the object that you want
	*/
		return ( function () {
			return ( fnMethod.apply( objSelf, fnArguments ) );
		} );

	};  // end Utilities.bind()







================
Parking Lot
================

	// One big list of Others. Using this means getting lowest
	// Other is less straightforward. Until there's a row object
	// with its own Others to cycle through, this might be shelved
	field.buildRows = function ( numRows, rowHeight ) {
	/*

	Makes row html, Other objects, and adds the Others to the row
	It feels better to hand in othersTypes as a parameter rather
	than using self.othersTypes, but I don't know why.
	*/
		var self = this;

		var rows 		= [];
		var othersList 	= [];

		for ( var rowNum = 0; rowNum < numRows; rowNum++ ) {

			var top 					= rowHeight * rowNum;

			var rowHTML 				= document.createElement( "div" );
			rowHTML.className 			= "object others row row-" + (rowNum + 1);
			rowHTML.dataset.direction 	= 'left';
			rowHTML.dataset.left		= 0;
			rowHTML.dataset.top 		= top;

			rowHTML.style.top 			= top + "%";

			// Add row Others
			var other;
			for ( var col = 0; col < self.numCols; col++ ) {

				var otherType 	= self.rowMap[ rowNum ];
				// var leftVal 	= col * self.colPercent;
				// var leftStr 	= leftVal + "%";

				// // Create an Other of this type with this css "left" value
				// var other 		= Other( self.html, self.othersTypes[ type ], leftStr );
				var other 		= Other( self.html, self.othersTypes[ otherType ], col, self.colPercent );
				other.buildHTML();
				other.column 	= col;

				othersList.push( other );
				rowHTML.appendChild( other.html );

			}  // end for ( column )

			rows.push( rowHTML );

		}  // end for ( rowNum )

		self.rows 		= rows
		self.othersList = othersList;

		return rows;

	};  // end Field.buildRows()


	-- Examine at some future date --
	(Not working)
	util.unwrapArray = function ( ourArray, count ) {
	/* ( [[*]] ) -> [[]]

	Open up ourArray to make sure contents are not lists
	If they are, continue to peel back until only 
	lists without their own lists remain.

	Count should always start as 0
	*/
		var self = this;

		var arrayOfArrays = [];
// debugger;
		// A non-array object should never get in here, it'll make a mess
		if ( ourArray.constructor !== Array ) {
			console.error( "unwrapArray recieved a non-array object." );

		// If an item of the array isn't an array itself, we've reached the
		// end, start returning
		} else if ( ourArray[0].constructor !== Array ) {

			if ( count !== 0 ) { return ourArray; }
			else { return [ ourArray ] }

		} else {

			for ( var arrayi = 0; arrayi < ourArray.length; arrayi++ ) {
				arrayOfArrays.push(  self.unwrapArray(ourArray[ arrayi ])  );
			}

		}

		return arrayOfArrays;
	};  // End Utilities.unwrapArray

vs.

(Not working)
function flatten(a) {
    var out = [];
    for (var i=0; i<a.length; i++) {
        if (Array.isArray(a[i])) {
            out = out.concat(flatten(a[i]));
        } else {
            out.push(a[i]);
        }
    }
    return out;
}

(Working)
function flatten2( thisArray ) {
    var out = [];
    if (Array.isArray( thisArray[0] )) {
        for (var i = 0; i < thisArray.length; i++) {
            out = out.concat( flatten2( thisArray[i] ));
        }
    } else {
        out.push( thisArray );
    }
    return out;
}
(Working)
function flatten3( thisArray ) {
    var out = [];
    for (var i = 0; i < thisArray.length; i++) {
        debugger;
        if (Array.isArray( thisArray[i])) {
            out = out.concat( flatten3( thisArray[i] ) );
        } else if ( i === (thisArray.length - 1) ) {
            out.push( thisArray );
        }
    }
    return out;
}
(Working)
function flatten4( thisArray ) {
    if (!Array.isArray( thisArray[0] )) {
        return [thisArray];
    }
    return thisArray.reduce(function(p, c) {
        return p.concat(flatten4(c));
    }, []);
}
